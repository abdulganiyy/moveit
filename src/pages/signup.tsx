import Head from "next/head";
import Link from "next/link";
import { Inter } from "next/font/google";
// import { MdOutlineMail } from "react-icons/md";
// import { VscKey } from "react-icons/vsc";
import { Formik, Form } from "formik";
import * as yup from "yup";
import Axios from "axios";
import { signIn } from "next-auth/react";
import { toast } from "react-toastify";

import AuthLayout from "@/components/layouts.tsx/AuthLayout";
import FormikInput from "@/components/inputs/FormikInput";
import Title from "@/components/typography/Title";
import P from "@/components/typography/P";
import Button from "@/components/buttons/Button";

import { useRouter } from "next/router";
import { useSession, getSession } from "next-auth/react";

const inter = Inter({ subsets: ["latin"] });

const validationSchema = yup.object({
  firstName: yup.string().required(),
  lastName: yup.string().required(),
  email: yup.string().required(),
  password: yup.string().required(),
});

const delay = async (ms: number) => {
  return new Promise((resolve) => setTimeout(() => resolve(""), ms));
};
export default function Home() {
  const { data: session } = useSession();

  const router = useRouter();
  return (
    <>
      <Head>
        <title>MOVE IT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AuthLayout>
        <div className="flex flex-col items-center pt-14 md:max-w-[388px] mx-auto">
          <div className="flex flex-col justify-center items-center gap-y-[22px]">
            <Title>Sign Up</Title>
            <div className="max-w-[447px] text-center">
              <P>
                Welcome back, we exsist to make your money transfers as
                affordable and seamless as possible.
              </P>
            </div>
          </div>
          <Formik
            initialValues={{
              firstName: "",
              lastName: "",
              email: "",
              password: "",
            }}
            validationSchema={validationSchema}
            onSubmit={async (values, submitProps) => {
              //   await delay(5000);

              try {
                const response = await Axios.post("/api/signup", values, {
                  headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                  },
                });
                // alert(JSON.stringify(response.data));
                const res: any = await signIn("credentials", {
                  redirect: false,
                  email: values.email,
                  password: values.password,
                  callbackUrl: `${window.location.origin}`,
                });

                res.error
                  ? toast("Sign up failed", {
                      hideProgressBar: true,
                      // autoClose: 2000,
                      type: "error",
                    })
                  : router.push("/dashboard-admin");
                // : session.user.admin
                // ? router.push("/dashboard-admin")
                // : router.push(`/dashboard-${session.user.role}`);
              } catch (error) {
                toast("Sign up failed", {
                  hideProgressBar: true,
                  // autoClose: 2000,
                  type: "error",
                });
              } finally {
                submitProps.setSubmitting(false);
                submitProps.resetForm();
              }
            }}
          >
            {(formik) => {
              console.log(formik.isValid, formik.isSubmitting);
              return (
                <Form>
                  <div className="mt-10 flex flex-col gap-y-[22px]">
                    <div>
                      <FormikInput name="firstName" placeholder="First Name" />
                    </div>
                    <div>
                      <FormikInput name="lastName" placeholder="Last Name" />
                    </div>
                    <div>
                      <FormikInput name="email" placeholder="Email" />
                    </div>
                    <div>
                      <FormikInput
                        name="password"
                        type="password"
                        placeholder="Password"
                      />
                    </div>
                  </div>
                  <div className="w-full mt-5 text-center md:text-right text-[16px] leading-[20px] text-[#080F50] font-normal	">
                    <Link href="/" className="">
                      Already signed in?
                    </Link>
                  </div>
                  <div className="mt-5 flex justify-center">
                    <Button
                      type="submit"
                      disabled={!formik.isValid || formik.isSubmitting}
                      isLoading={formik.isSubmitting === true}
                    >
                      Sign Up
                    </Button>
                  </div>
                </Form>
              );
            }}
          </Formik>
        </div>
      </AuthLayout>
    </>
  );
}
